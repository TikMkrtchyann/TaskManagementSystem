@page "/tasks/admin/create"
@attribute [Authorize(Roles = "Admin")]
@inject IUserService UserService
@inject ITaskService TaskService
@inject NavigationManager NavigationManager

<h3>Create New Task</h3>

<EditForm Model="@_model" OnValidSubmit="HandleCreateTask">
    <DataAnnotationsValidator />
    <div class="form-group">
        <label>Title</label>
        <InputText class="form-control" @bind-Value="_model.Title" />
        <ValidationMessage For="@(() => _model.Title)" />
    </div>
    <div class="form-group">
        <label>Description</label>
        <InputTextArea class="form-control" @bind-Value="_model.Description" />
        <ValidationMessage For="@(() => _model.Description)" />
    </div>
    <div class="form-group">
        <label>Username</label>
        <InputSelect class="form-control" @bind-Value="_model.Username" multiple>
            @foreach (var name in _usernames)
            {
                <option value="@name">@name</option>
            }
        </InputSelect>
    </div>

    <button type="submit" class="btn btn-primary mt-2">Create Task</button>
    <a href="/admin" class="btn btn-secondary mt-2">Cancel</a>
</EditForm>

@code {
    private CreateAdminTaskDto _model = new();
    private List<string> _usernames = new();

    protected override async Task OnInitializedAsync()
    {
        var usernameList = await UserService.GetAllUsernames();

        if (usernameList != null)
        {
            _usernames = usernameList;
        }
    }

    private async Task HandleCreateTask()
    {
        var success = await TaskService.CreateAdminTask(_model);
        if (success)
        {
            NavigationManager.NavigateTo("/");
        }
    }
}