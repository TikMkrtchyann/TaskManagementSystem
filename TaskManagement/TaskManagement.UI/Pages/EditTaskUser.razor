@page "/tasks/editUser/{Id:int}"
@attribute [Authorize(Roles = "User")]
@inject ITaskService TaskService
@inject NavigationManager NavigationManager

<h3>EditStatus</h3>

@if (_model == null)
{
    <p><em>Loading task...</em></p>
}
else
{
    <EditForm Model="@_model" OnValidSubmit="HandleUpdateTask">
        <DataAnnotationsValidator />
        <div class="form-group">
            <label>Status</label>
            <InputSelect class="form-control" @bind-Value="_model.Status">
                @foreach (TaskStatus status in Enum.GetValues(typeof(TaskStatus)))
                {
                    <option value="@status">@status</option>
                }
            </InputSelect>
        </div>

        <button type="submit" class="btn btn-primary mt-2">Save Changes</button>
        <a href="/" class="btn btn-secondary mt-2">Cancel</a>

    </EditForm>
}

@code {
    [Parameter]
    public int Id { get; set; }

    private UpdateTaskStatusDto _model;

    protected override async Task OnInitializedAsync()
    {
        var task = await TaskService.GetTaskById(Id);
        if (task != null)
        {
            _model = new UpdateTaskStatusDto
            {
                Status = task.Status
            };
        }
    }

    private async Task HandleUpdateTask()
    {
        var success = await TaskService.UpdateTaskStatus(Id, _model);
        if (success)
        {
            NavigationManager.NavigateTo("/");
        }
    }
}
